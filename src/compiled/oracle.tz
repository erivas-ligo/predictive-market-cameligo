{ parameter
    (or (or (or (pair %addEvent
                   (string %name)
                   (string %videogame)
                   (timestamp %begin_at)
                   (timestamp %end_at)
                   (timestamp %modified_at)
                   (pair %opponents (string %team_one) (string %team_two))
                   (bool %is_finalized)
                   (option %is_draw bool)
                   (option %is_team_one_win bool))
                (address %changeManager))
            (or (address %changeSigner)
                (pair %getEvent (nat %requested_event_id) (address %callback))))
        (or (unit %switchPause)
            (pair %updateEvent
               (nat %updated_event_id)
               (pair %updated_event
                  (string %name)
                  (string %videogame)
                  (timestamp %begin_at)
                  (timestamp %end_at)
                  (timestamp %modified_at)
                  (pair %opponents (string %team_one) (string %team_two))
                  (bool %is_finalized)
                  (option %is_draw bool)
                  (option %is_team_one_win bool))))) ;
  storage
    (pair (bool %isPaused)
          (address %manager)
          (address %signer)
          (map %events
             nat
             (pair (string %name)
                   (string %videogame)
                   (timestamp %begin_at)
                   (timestamp %end_at)
                   (timestamp %modified_at)
                   (pair %opponents (string %team_one) (string %team_two))
                   (bool %is_finalized)
                   (option %is_draw bool)
                   (option %is_team_one_win bool)))
          (nat %events_index)
          (map %metadata string bytes)) ;
  code { PUSH string "No Event with this ID" ;
         LAMBDA
           (pair address address)
           unit
           { UNPAIR ;
             COMPARE ;
             NEQ ;
             IF { PUSH string "Not the Manager of the contract" ; FAILWITH } { UNIT } } ;
         LAMBDA
           (pair address address address)
           unit
           { UNPAIR 3 ;
             DIG 2 ;
             DUP 2 ;
             COMPARE ;
             NEQ ;
             DUG 2 ;
             COMPARE ;
             NEQ ;
             AND ;
             IF { PUSH string "Not the Manager or signer of the contract" ; FAILWITH }
                { UNIT } } ;
         DIG 3 ;
         UNPAIR ;
         IF_LEFT
           { IF_LEFT
               { DIG 4 ;
                 DROP ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     DUP 2 ;
                     GET 5 ;
                     DUP 3 ;
                     GET 3 ;
                     SENDER ;
                     PAIR 3 ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP 2 ;
                     DUP 3 ;
                     GET 7 ;
                     DIG 2 ;
                     DUP 4 ;
                     GET 9 ;
                     SWAP ;
                     SOME ;
                     SWAP ;
                     UPDATE ;
                     UPDATE 7 ;
                     PUSH nat 1 ;
                     DIG 2 ;
                     GET 9 ;
                     ADD ;
                     UPDATE 9 }
                   { DIG 2 ;
                     DROP ;
                     DUP 2 ;
                     GET 3 ;
                     SENDER ;
                     PAIR ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP 2 ;
                     GET 3 ;
                     DUP 2 ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "New Manager address can't be the same as the current one" ;
                          FAILWITH }
                        {} ;
                     UPDATE 3 } ;
                 NIL operation }
               { DIG 3 ;
                 DROP ;
                 IF_LEFT
                   { DIG 3 ;
                     DROP ;
                     DUP 2 ;
                     GET 5 ;
                     DUP 3 ;
                     GET 3 ;
                     SENDER ;
                     PAIR 3 ;
                     DIG 3 ;
                     SWAP ;
                     EXEC ;
                     DROP ;
                     DUP 2 ;
                     GET 5 ;
                     DUP 2 ;
                     COMPARE ;
                     EQ ;
                     IF { PUSH string "New Signer address can't be the same as the current one" ;
                          FAILWITH }
                        {} ;
                     UPDATE 5 ;
                     NIL operation }
                   { DIG 2 ;
                     DROP ;
                     DUP 2 ;
                     GET 7 ;
                     DUP 2 ;
                     CAR ;
                     GET ;
                     IF_NONE { DIG 2 ; FAILWITH } { DIG 3 ; DROP } ;
                     SWAP ;
                     CDR ;
                     CONTRACT %saveEvent
                       (pair (string %name)
                             (string %videogame)
                             (timestamp %begin_at)
                             (timestamp %end_at)
                             (timestamp %modified_at)
                             (pair %opponents (string %team_one) (string %team_two))
                             (bool %is_finalized)
                             (option %is_draw bool)
                             (option %is_team_one_win bool)) ;
                     IF_NONE { PUSH string "Unknown contract" ; FAILWITH } {} ;
                     PUSH mutez 0 ;
                     DIG 2 ;
                     TRANSFER_TOKENS ;
                     SWAP ;
                     NIL operation ;
                     DIG 2 ;
                     CONS } } }
           { IF_LEFT
               { DIG 2 ;
                 DIG 4 ;
                 DROP 3 ;
                 DUP ;
                 GET 3 ;
                 SENDER ;
                 PAIR ;
                 DIG 2 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DUP ;
                 CAR ;
                 IF { PUSH bool False ; UPDATE 1 } { PUSH bool True ; UPDATE 1 } }
               { DIG 3 ;
                 DROP ;
                 DUP ;
                 CAR ;
                 DUP 3 ;
                 GET 5 ;
                 DUP 4 ;
                 GET 3 ;
                 SENDER ;
                 PAIR 3 ;
                 DIG 4 ;
                 SWAP ;
                 EXEC ;
                 DROP ;
                 DUP 3 ;
                 GET 7 ;
                 DUP 2 ;
                 GET ;
                 IF_NONE { DIG 3 ; FAILWITH } { DIG 4 ; DROP 2 } ;
                 DUP 3 ;
                 DIG 3 ;
                 GET 7 ;
                 DIG 3 ;
                 CDR ;
                 SOME ;
                 DIG 3 ;
                 UPDATE ;
                 UPDATE 7 } ;
             NIL operation } ;
         PAIR } ;
  view "getManager" unit (pair timestamp address) { CDR ; GET 3 ; NOW ; PAIR } ;
  view "getSigner" unit (pair timestamp address) { CDR ; GET 5 ; NOW ; PAIR } ;
  view "getStatus" unit (pair timestamp bool) { CDR ; CAR ; NOW ; PAIR } ;
  view "getEvent"
       nat
       (pair timestamp
             (string %name)
             (string %videogame)
             (timestamp %begin_at)
             (timestamp %end_at)
             (timestamp %modified_at)
             (pair %opponents (string %team_one) (string %team_two))
             (bool %is_finalized)
             (option %is_draw bool)
             (option %is_team_one_win bool))
       { UNPAIR ;
         SWAP ;
         GET 7 ;
         SWAP ;
         GET ;
         IF_NONE { PUSH string "No Event with this ID" ; FAILWITH } {} ;
         NOW ;
         PAIR } }

